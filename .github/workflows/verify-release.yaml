# THIS CODE WAS AUTOGENERATED. DO NOT MODIFY THIS FILE DIRECTLY
# THE SOURCE CODE LIVES IN A DIFFERENT REPOSITORY:
#   - centralized-templates
# FILE STEWARD: @pleo-io/devexp

name: Verify Release
# This verifies that a given PR has the required labels before merge into the default branch.
on:
  pull_request:
    types:
      - opened
      - edited
      - labeled
      - unlabeled
      - synchronize
      - ready_for_review

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  auto-version-pr:
    name: Detect OpenAPI changes
    if: ${{ (github.event.repository.language == 'Kotlin' || github.event.repository.language == 'Java') && github.event.pull_request.draft == false && false }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      # Checkout the default branch
      - name: Checkout '${{ github.event.repository.default_branch }}'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}

      # Set up a JDK environment for building, testing and releasing.
      - name: Setup JDK 17.0.4
        uses: actions/setup-java@v3.10.0
        with:
          java-version: 17.0.4
          distribution: temurin

      # Allow caching Gradle executions to further speed up CI/CD steps invoking Gradle.
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.3.3
        with:
          gradle-executable: ./gradlew
          gradle-version: wrapper
          gradle-home-cache-cleanup: true
          cache-read-only: true

      # Generate the '${{ github.event.repository.default_branch }}' OpenAPI definition.
      - name: Generate '${{ github.event.repository.default_branch }}' OpenAPI spec
        run: |
          ./gradlew pleo-"$REPOSITORY_NAME"-rest:resolve --stacktrace
          echo "Using OpenAPI spec path: 'pleo-$REPOSITORY_NAME-rest/**/$REPOSITORY_NAME-openapi.yaml'"
          mv pleo-"$REPOSITORY_NAME"-rest/**/"$REPOSITORY_NAME"-openapi.yaml existing.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}
          GRADLE_READ_KEY: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}
          REPOSITORY_NAME: ${{ github.event.repository.name }}

      - name: Checkout HEAD
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GITHUB_SHA }}
          clean: false

      # Generate modified OpenAPI definition from changes.
      - name: Generate 'HEAD' OpenAPI spec
        run: |
          ./gradlew pleo-"$REPOSITORY_NAME"-rest:resolve --stacktrace
          echo "Using OpenAPI spec path: 'pleo-$REPOSITORY_NAME-rest/**/$REPOSITORY_NAME-openapi.yaml'"
          mv pleo-"$REPOSITORY_NAME"-rest/**/"$REPOSITORY_NAME"-openapi.yaml generated.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}
          GRADLE_READ_KEY: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}
          REPOSITORY_NAME: ${{ github.event.repository.name }}

      - name: Show spec contents
        run: |
          echo "::group::existing.yaml"
          cat existing.yaml
          echo "::group::generated.yaml"
          cat generated.yaml

      # Install OpenAPI diff tools.
      - name: Install 'openapi-diff'
        run: |
          npm install openapi-diff yaml

      # Diff OpenAPI specs.
      - name: Diff OpenAPI specs
        id: openapi-diff
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          result-encoding: string
          script: |
            const fs = require('fs/promises')
            const yaml = require('yaml')
            const openapiDiff = require('openapi-diff')
            const [existingContents, generatedContents] = await Promise.all([fs.readFile('existing.yaml', 'utf-8'), fs.readFile('generated.yaml', 'utf-8')])
            const [existing, generated] = [yaml.parse(existingContents), yaml.parse(generatedContents)]
            const {breakingDifferencesFound, nonBreakingDifferences} = await openapiDiff.diffSpecs({
              sourceSpec: { content: JSON.stringify(existing), location: 'existing.yaml', format: 'openapi3' },
              destinationSpec: { content: JSON.stringify(generated), location: 'generated.yaml', format: 'openapi3' }
            })
            core.info(`Saw breaking differences: ${breakingDifferencesFound}`)
            core.info(`Saw non-breaking differences: ${JSON.stringify(nonBreakingDifferences)}`)
            if (breakingDifferencesFound) {
              core.info('Detected breaking changes (major).')
              return 'major'
            }
            if (nonBreakingDifferences.length > 0) {
              core.info('Detected non-breaking changes (minor).')
              return 'minor'
            }
            core.info('Detected no changes (unknown).')
            return 'unknown'

      - name: Get all PR labels
        id: pr-labels
        uses: joerick/pr-labels-action@v1.0.7

      - name: Add labels for unlabelled PRs
        if: steps.openapi-diff.outputs.result != 'unknown' && steps.pr-labels.outputs.labels == ''
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: ${{ steps.openapi-diff.outputs.result }}

      - name: Add 'major' label for breaking changes
        if: contains(steps.pr-labels.outputs.labels, ' major ') != true && steps.openapi-diff.outputs.result == 'major'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: ${{ steps.openapi-diff.outputs.result }}

      - name: Find any previous PR comment
        if: ${{ contains(steps.pr-labels.outputs.labels, ' ${{ steps.openapi-diff.outputs.result }} ') != true }}
        uses: peter-evans/find-comment@v2
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: does not match the detected API changes

      - name: Suggest the detected label for label mismatches
        id: create-update-comment
        if: ${{ steps.openapi-diff.outputs.result != 'unknown' && steps.openapi-diff.outputs.result != '' && contains(steps.pr-labels.outputs.labels, ' ${{ steps.openapi-diff.outputs.result }} ') != true }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            It looks like the release label of this PR does not match the detected API changes in the PR. 
            Based on the changes to the API this PR should be labelled `${{ steps.openapi-diff.outputs.result }}`.
          edit-mode: replace

      - name: Delete the PR comment when no changes are detected
        continue-on-error: true
        if: ${{ steps.openapi-diff.outputs.result == 'unknown' && steps.openapi-diff.outputs.result == '' && steps.create-update-comment.outputs.comment-id }}
        uses: sandeshjangam/comment-actions@v1
        with:
          type: "delete"
          comment_id: ${{ steps.create-update-comment.outputs.comment-id }}

  verify-release:
    name: Verify Release
    runs-on: ubuntu-latest
    needs: auto-version-pr
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0

      # Allow Renovate to pass this check on checks on branches where a PR isn't present yet.
      - name: Determine author
        id: determine_author
        run: |
          AUTHOR="$(git log -1 --pretty=format:'%an' | xargs -0)"
          echo "$AUTHOR"
          echo "author=$AUTHOR" >> "$GITHUB_OUTPUT"

      - name: Verify PR labels
        id: verify_pr_labels
        if: steps.determine_author.outputs.author != 'Renovate (Pleo)'
        uses: docker://agilepathway/pull-request-label-checker:latest
        with:
          any_of: major,minor,patch,internal
          repo_token: ${{ secrets.GITHUB_TOKEN }}
